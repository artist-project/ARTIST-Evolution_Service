<?xml version="1.0"?>
<doc>
  <assembly>
    <name>NRules</name>
  </assembly>
  <members>
    <member name="T:NRules.Diagnostics.ErrorEventArgs">
      <summary>
            Information related to failure events.
            </summary>
    </member>
    <member name="P:NRules.Diagnostics.ErrorEventArgs.Exception">
      <summary>
            Exception related to the event.
            </summary>
    </member>
    <member name="T:NRules.Diagnostics.RecoverableErrorEventArgs">
      <summary>
            Information related to failure events that allow observer to mark error as handled.
            </summary>
    </member>
    <member name="P:NRules.Diagnostics.RecoverableErrorEventArgs.IsHandled">
      <summary>
            Flag indicating whether the exception was handled.
            If handler sets this to <c>true</c> then engine continues execution,
            otherwise exception is rethrown and terminates engine's execution.
            </summary>
    </member>
    <member name="T:NRules.Diagnostics.ActionErrorEventArgs">
      <summary>
            Information related to error events raised during action execution.
            </summary>
    </member>
    <member name="P:NRules.Diagnostics.ActionErrorEventArgs.Action">
      <summary>
            Action that caused exception.
            </summary>
    </member>
    <member name="P:NRules.Diagnostics.ActionErrorEventArgs.Facts">
      <summary>
            Facts that caused exception.
            </summary>
    </member>
    <member name="T:NRules.Diagnostics.AgendaEventArgs">
      <summary>
            Information related to agenda events.
            </summary>
    </member>
    <member name="P:NRules.Diagnostics.AgendaEventArgs.Rule">
      <summary>
            Rule related to the event.
            </summary>
    </member>
    <member name="P:NRules.Diagnostics.AgendaEventArgs.Facts">
      <summary>
            Tuple related to the event.
            </summary>
    </member>
    <member name="T:NRules.Diagnostics.ConditionErrorEventArgs">
      <summary>
            Information related to error events raised during condition evaluation.
            </summary>
    </member>
    <member name="P:NRules.Diagnostics.ConditionErrorEventArgs.Condition">
      <summary>
            Condition that caused exception.
            </summary>
    </member>
    <member name="P:NRules.Diagnostics.ConditionErrorEventArgs.Facts">
      <summary>
            Facts that caused exception.
            </summary>
    </member>
    <member name="T:NRules.Diagnostics.IEventProvider">
      <summary>
            Provider of rules session events.
            </summary>
    </member>
    <member name="E:NRules.Diagnostics.IEventProvider.ActivationCreatedEvent">
      <summary>
            Raised when a new rule activation is created.
            A new activation is created when a new set of facts (tuple) matches a rule.
            The activation is placed on the agenda and becomes a candidate for firing.
            </summary>
    </member>
    <member name="E:NRules.Diagnostics.IEventProvider.ActivationDeletedEvent">
      <summary>
            Raised when an existing activation is deleted.
            An activation is deleted when a previously matching set of facts (tuple) no longer 
            matches the rule due to updated or retracted facts.
            The activation is removed from the agenda and is no longer a candidate for firing.
            </summary>
    </member>
    <member name="E:NRules.Diagnostics.IEventProvider.RuleFiringEvent">
      <summary>
            Raised before a rule is about to fire.
            </summary>
    </member>
    <member name="E:NRules.Diagnostics.IEventProvider.RuleFiredEvent">
      <summary>
            Raised after a rule has fired and all its actions executed.
            </summary>
    </member>
    <member name="E:NRules.Diagnostics.IEventProvider.FactInsertingEvent">
      <summary>
            Raised before a new fact is inserted into working memory.
            </summary>
    </member>
    <member name="E:NRules.Diagnostics.IEventProvider.FactInsertedEvent">
      <summary>
            Raised after a new fact is inserted into working memory.
            </summary>
    </member>
    <member name="E:NRules.Diagnostics.IEventProvider.FactUpdatingEvent">
      <summary>
            Raised before an existing fact is updated in the working memory.
            </summary>
    </member>
    <member name="E:NRules.Diagnostics.IEventProvider.FactUpdatedEvent">
      <summary>
            Raised after an existing fact is updated in the working memory.
            </summary>
    </member>
    <member name="E:NRules.Diagnostics.IEventProvider.FactRetractingEvent">
      <summary>
            Raised before an existing fact is retracted from the working memory.
            </summary>
    </member>
    <member name="E:NRules.Diagnostics.IEventProvider.FactRetractedEvent">
      <summary>
            Raised after an existing fact is retracted from the working memory.
            </summary>
    </member>
    <member name="E:NRules.Diagnostics.IEventProvider.ActionFailedEvent">
      <summary>
            Raised when action execution threw an exception.
            Gives observer of the event control over handling of the exception.
            </summary>
    </member>
    <member name="E:NRules.Diagnostics.IEventProvider.ConditionFailedEvent">
      <summary>
            Raised when condition evaluation threw an exception.
            </summary>
    </member>
    <member name="T:NRules.Diagnostics.FactInfo">
      <summary>
            Fact in the working memory.
            </summary>
    </member>
    <member name="P:NRules.Diagnostics.FactInfo.Type">
      <summary>
            Fact type.
            </summary>
    </member>
    <member name="P:NRules.Diagnostics.FactInfo.Value">
      <summary>
            Actual fact object.
            </summary>
    </member>
    <member name="T:NRules.Diagnostics.ISessionSnapshotProvider">
      <summary>
            Provides a snapshot of rules session state.
            </summary>
    </member>
    <member name="M:NRules.Diagnostics.ISessionSnapshotProvider.GetSnapshot">
      <summary>
            Returns a snapshot of session state for diagnostics.
            Session state is a graph representing the structure of the underlying Rete network and location of facts in memory nodes.
            </summary>
      <returns>Session snapshot.</returns>
    </member>
    <member name="T:NRules.Diagnostics.LinkInfo">
      <summary>
            Link between nodes in the rete network graph.
            </summary>
    </member>
    <member name="P:NRules.Diagnostics.LinkInfo.Source">
      <summary>
            Source node.
            </summary>
    </member>
    <member name="P:NRules.Diagnostics.LinkInfo.Target">
      <summary>
            Target node.
            </summary>
    </member>
    <member name="T:NRules.Diagnostics.NodeType">
      <summary>
            Types of nodes in the rete network.
            </summary>
    </member>
    <member name="T:NRules.Diagnostics.NodeInfo">
      <summary>
            Node in the rete network graph.
            </summary>
    </member>
    <member name="P:NRules.Diagnostics.NodeInfo.NodeType">
      <summary>
            Type of the node in the rete network.
            </summary>
    </member>
    <member name="P:NRules.Diagnostics.NodeInfo.Details">
      <summary>
            Additional node details.
            </summary>
    </member>
    <member name="P:NRules.Diagnostics.NodeInfo.Conditions">
      <summary>
            Match conditions.
            </summary>
    </member>
    <member name="P:NRules.Diagnostics.NodeInfo.Items">
      <summary>
            Facts/tuples currently associated with the node.
            </summary>
    </member>
    <member name="T:NRules.Diagnostics.SessionSnapshot">
      <summary>
            Snapshot of rules session state.
            </summary>
    </member>
    <member name="P:NRules.Diagnostics.SessionSnapshot.Nodes">
      <summary>
            Nodes of the rete network graph.
            </summary>
    </member>
    <member name="P:NRules.Diagnostics.SessionSnapshot.Links">
      <summary>
            Links between nodes of the rete network graph.
            </summary>
    </member>
    <member name="T:NRules.Diagnostics.WorkingMemoryEventArgs">
      <summary>
            Information related to working memory events.
            </summary>
    </member>
    <member name="P:NRules.Diagnostics.WorkingMemoryEventArgs.Fact">
      <summary>
            Fact related to the event.
            </summary>
    </member>
    <member name="T:NRules.RuleCompilationException">
      <summary>
            Represents errors that occur while compiling a rule.
            </summary>
    </member>
    <member name="P:NRules.RuleCompilationException.RuleName">
      <summary>
            Rule that caused exception.
            </summary>
    </member>
    <member name="T:NRules.RuleCompiler">
      <summary>
            Compiles rules in a canonical rule model form into an executable representation.
            </summary>
    </member>
    <member name="M:NRules.RuleCompiler.Compile(System.Collections.Generic.IEnumerable{NRules.RuleModel.IRuleDefinition})">
      <summary>
            Compiles a collection of rules into a session factory.
            </summary>
      <param name="ruleDefinitions">Rules to compile.</param>
      <returns>Session factory.</returns>
      <exception cref="T:NRules.RuleCompilationException">Any fatal error during rules compilation.</exception>
    </member>
    <member name="M:NRules.RuleCompiler.Compile(System.Collections.Generic.IEnumerable{NRules.RuleModel.IRuleSet})">
      <summary>
            Compiles rules from rule sets into a session factory.
            </summary>
      <param name="ruleSets">Rule sets to compile.</param>
      <returns>Session factory.</returns>
    </member>
    <member name="P:NRules.Rete.Tuple.Facts">
      <summary>
            Facts contained in the tuple in reverse order (fast iteration over linked list).
            Reverse collection to get facts in their actual order.
            </summary>
    </member>
    <member name="T:NRules.RuleExecutionException">
      <summary>
            Represents errors that occur during rules execution.
            </summary>
    </member>
    <member name="T:NRules.RuleExpressionEvaluationException">
      <summary>
            Represents errors that occur while evaluating expressions as part of rules execution.
            </summary>
    </member>
    <member name="P:NRules.RuleExpressionEvaluationException.Expression">
      <summary>
            Expression that caused exception.
            </summary>
    </member>
    <member name="M:NRules.RuleRepositoryExtensions.GetRules(NRules.RuleModel.IRuleRepository)">
      <summary>
            Retrieves all rules from all rule sets contained in the repository.
            </summary>
      <returns>Collection of rules from the repository.</returns>
    </member>
    <member name="M:NRules.RuleRepositoryExtensions.Compile(NRules.RuleModel.IRuleRepository)">
      <summary>
            Compiles all rules in the repository into a session factory.
            Use <see cref="T:NRules.RuleCompiler" /> explicitly if only need to compile a subset of rules.
            </summary>
      <param name="repository">Rule repository.</param>
      <returns>Session factory.</returns>
      <seealso cref="T:NRules.RuleCompiler" />
    </member>
    <member name="T:NRules.RuleActionEvaluationException">
      <summary>
            Represents errors that occur while evaluating rule action.
            </summary>
    </member>
    <member name="T:NRules.RuleConditionEvaluationException">
      <summary>
            Represents errors that occur while evaluating rule condition.
            </summary>
    </member>
    <member name="T:NRules.ISession">
      <summary>
            Represents a rules engine session. Created by <see cref="T:NRules.ISessionFactory" />.
            Each session has its own working memory, and exposes operations that 
            manipulate facts in it, as well as fire matching rules.
            </summary>
      <event cref="E:NRules.Diagnostics.IEventProvider.FactInsertingEvent">Before processing fact insertion.</event>
      <event cref="E:NRules.Diagnostics.IEventProvider.FactInsertedEvent">After processing fact insertion.</event>
      <event cref="E:NRules.Diagnostics.IEventProvider.FactUpdatingEvent">Before processing fact update.</event>
      <event cref="E:NRules.Diagnostics.IEventProvider.FactUpdatedEvent">After processing fact update.</event>
      <event cref="E:NRules.Diagnostics.IEventProvider.FactRetractingEvent">Before processing fact retraction.</event>
      <event cref="E:NRules.Diagnostics.IEventProvider.FactRetractedEvent">After processing fact retraction.</event>
      <event cref="E:NRules.Diagnostics.IEventProvider.ActivationCreatedEvent">When a set of facts matches a rule.</event>
      <event cref="E:NRules.Diagnostics.IEventProvider.ActivationDeletedEvent">When a set of facts no longer matches a rule.</event>
      <event cref="E:NRules.Diagnostics.IEventProvider.RuleFiringEvent">Before rule's actions are executed.</event>
      <event cref="E:NRules.Diagnostics.IEventProvider.RuleFiredEvent">After rule's actions are executed.</event>
      <event cref="E:NRules.Diagnostics.IEventProvider.ConditionFailedEvent">When there is an error during condition evaluation,
            before throwing exception to the client.</event>
      <event cref="E:NRules.Diagnostics.IEventProvider.ActionFailedEvent">&gt;When there is an error during action evaluation,
            before throwing exception to the client.</event>
      <exception cref="T:NRules.RuleConditionEvaluationException">Error while evaluating any of the rules' conditions.
            This exception can also be observed as an event <see cref="E:NRules.Diagnostics.IEventProvider.ConditionFailedEvent" />.</exception>
      <exception cref="T:NRules.RuleActionEvaluationException">Error while evaluating any of the rules' actions.
            This exception can also be observed as an event <see cref="E:NRules.Diagnostics.IEventProvider.ActionFailedEvent" />.</exception>
      <threadsafety instance="false" />
    </member>
    <member name="M:NRules.ISession.Insert(System.Object)">
      <summary>
            Adds a new fact to the rules engine memory.
            </summary>
      <param name="fact">Fact to add.</param>
      <exception cref="T:System.ArgumentException">If fact already exists in working memory.</exception>
    </member>
    <member name="M:NRules.ISession.Update(System.Object)">
      <summary>
            Updates existing fact in the rules engine memory.
            </summary>
      <param name="fact">Fact to update.</param>
      <exception cref="T:System.ArgumentException">If fact does not exist in working memory.</exception>
    </member>
    <member name="M:NRules.ISession.Retract(System.Object)">
      <summary>
            Removes existing fact from the rules engine memory.
            </summary>
      <param name="fact">Fact to remove.</param>
      <exception cref="T:System.ArgumentException">If fact does not exist in working memory.</exception>
    </member>
    <member name="M:NRules.ISession.Fire">
      <summary>
            Starts rules execution cycle.
            This method blocks until there are no more rules to fire.
            </summary>
    </member>
    <member name="M:NRules.ISession.Query``1">
      <summary>
            Creates a LINQ query to retrieve facts of a given type from the rules engine's memory.
            </summary>
      <typeparam name="TFact">Type of facts to query. Use <see cref="T:System.Object" /> to query all facts.</typeparam>
      <returns>Queryable working memory of the rules engine.</returns>
    </member>
    <member name="P:NRules.ISession.Events">
      <summary>
            Provider of rule session events. Use it to subscribe to various rules engine lifecycle events.
            </summary>
    </member>
    <member name="T:NRules.Session">
      <summary>
            See <see cref="T:NRules.ISession" />.
            </summary>
    </member>
    <member name="T:NRules.ISessionFactory">
      <summary>
            Represents compiled production rules that can be used to create rules sessions.
            Created by <see cref="T:NRules.RuleCompiler" /> by compiling rule model into an executable form.
            </summary>
      <remarks>
            Session factory is expensive to create (because rules need to be compiled into an executable form).
            Therefore there needs to be only a single instance of session factory for a given set of rules for the lifetime of the application.
            If repeatedly running rules for different sets of facts, don't create a new session factory for each rules run.
            Instead, have a single session factory and create a new rules session for each independent universe of facts.
            </remarks>
      <seealso cref="T:NRules.ISession" />
      <threadsafety instance="true" />
    </member>
    <member name="M:NRules.ISessionFactory.CreateSession">
      <summary>
            Creates a new rules session.
            </summary>
      <returns>New rules session.</returns>
    </member>
    <member name="M:NRules.Utilities.FastDelegate.ExpressionOptimizer`1.CompactParameters(System.Linq.Expressions.LambdaExpression)">
      <summary>
            Transforms expression from multi-parameter to single array parameter,
            which allows execution w/o reflection.
            </summary>
      <param name="expression">Expression to transform.</param>
      <returns>Transformed expression.</returns>
    </member>
    <member name="M:NRules.Utilities.IndexMapExtensions.ToIndexMap``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Converts sequence to an index lookup map.
            </summary>
      <typeparam name="TElement">Type of element in the sequence.</typeparam>
      <param name="sequence">Sequence to convert.</param>
      <returns>Index lookup dictionary.</returns>
    </member>
    <member name="M:NRules.Utilities.IndexMapExtensions.IndexOrDefault``1(System.Collections.Generic.Dictionary{``0,System.Int32},``0,System.Int32)">
      <summary>
            Returns element's index or null.
            </summary>
      <typeparam name="TElement">Type of element in the index map.</typeparam>
      <param name="indexMap">Index map.</param>
      <param name="element">Element to lookup.</param>
      <param name="defaultValue">Default index if element not in the index map.</param>
      <returns>
      </returns>
    </member>
    <member name="T:NRules.Fluent.Dsl.DescriptionAttribute">
      <summary>
            Adds description to the rule.
            </summary>
    </member>
    <member name="T:NRules.Fluent.Dsl.NameAttribute">
      <summary>
            Adds name to the rule.
            </summary>
    </member>
    <member name="T:NRules.Fluent.Dsl.TagAttribute">
      <summary>
            Adds a tag to rule's metadata.
            A rule class can have multiple tag attributes, and also inherits tag attributes from its parent classes.
            Tags can be used to filter rules when loading them through fluent load specification.
            </summary>
    </member>
    <member name="T:NRules.Fluent.Dsl.ILeftHandSide">
      <summary>
            Rule's left hand side (conditions) expression builder.
            </summary>
    </member>
    <member name="M:NRules.Fluent.Dsl.ILeftHandSide.Match``1(System.Linq.Expressions.Expression{System.Func{``0}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}}[])">
      <summary>
            Defines a pattern for facts matching a set of conditions.
            </summary>
      <typeparam name="T">Type of fact to match.</typeparam>
      <param name="alias">Alias for the matching fact.</param>
      <param name="conditions">Set of conditions the fact must satisfy, for the rule to fire.</param>
      <returns>Left hand side expression builder.</returns>
    </member>
    <member name="M:NRules.Fluent.Dsl.ILeftHandSide.Match``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}}[])">
      <summary>
            Defines a pattern for facts matching a set of conditions.
            Does not bind matching fact to a variable.
            </summary>
      <typeparam name="T">Type of fact to match.</typeparam>
      <param name="condition">Condition the fact must satisfy, for the rule to fire.</param>
      <param name="conditions">Set of additional conditions the fact must satisfy, for the rule to fire.</param>
      <returns>Left hand side expression builder.</returns>
    </member>
    <member name="M:NRules.Fluent.Dsl.ILeftHandSide.Match``1">
      <summary>
            Defines a pattern matching all facts of a given type.
            Does not bind matching fact to a variable.
            </summary>
      <typeparam name="T">Type of fact to match.</typeparam>
      <returns>Left hand side expression builder.</returns>
    </member>
    <member name="M:NRules.Fluent.Dsl.ILeftHandSide.Collect``1(System.Linq.Expressions.Expression{System.Func{System.Collections.Generic.IEnumerable{``0}}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}}[])">
      <summary>
            Defines a pattern that aggregates matching facts into a collection.
            The rule only fires if the collection contains elements.
            </summary>
      <typeparam name="T">Type of facts to aggregate.</typeparam>
      <param name="alias">Alias for the collection of matching facts.</param>
      <param name="itemConditions">Set of conditions the facts must satisfy to get into the collection.</param>
      <returns>Left hand side expression builder.</returns>
    </member>
    <member name="M:NRules.Fluent.Dsl.ILeftHandSide.Exists``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}}[])">
      <summary>
            Defines a pattern that triggers the rule only if there is at least one matching fact (existential quantifier).
            </summary>
      <typeparam name="T">Type of fact to match.</typeparam>
      <param name="conditions">Set of conditions the facts must satisfy to be trigger the rule.</param>
      <returns>Left hand side expression builder.</returns>
    </member>
    <member name="M:NRules.Fluent.Dsl.ILeftHandSide.Not``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}}[])">
      <summary>
            Defines a pattern that triggers the rule only if there are no matching facts (negation quantifier).
            </summary>
      <typeparam name="T">Type of fact to match.</typeparam>
      <param name="conditions">Set of conditions the facts must not satisfy to trigger the rule.</param>
      <returns>Left hand side expression builder.</returns>
    </member>
    <member name="T:NRules.Fluent.Dsl.IRightHandSide">
      <summary>
            Rule's right hand side (actions) expression builder.
            </summary>
    </member>
    <member name="M:NRules.Fluent.Dsl.IRightHandSide.Do(System.Linq.Expressions.Expression{System.Action{NRules.RuleModel.IContext}})">
      <summary>
            Defines rule's action that engine executes when the rule fires.
            </summary>
      <param name="action">Action expression.</param>
      <returns>Right hand side expression builder.</returns>
    </member>
    <member name="T:NRules.Fluent.Dsl.Rule">
      <summary>
            Base class for inline rule definitions.
            To create a rule using internal DSL, create a class that inherits from <c>NRules.Fluent.Dsl.Rule</c>
            and override <see cref="M:NRules.Fluent.Dsl.Rule.Define" /> method.
            Use <see cref="M:NRules.Fluent.Dsl.Rule.When" /> and <see cref="M:NRules.Fluent.Dsl.Rule.Then" /> methods to define rule's conditions and actions correspondingly.
            </summary>
    </member>
    <member name="M:NRules.Fluent.Dsl.Rule.Priority(System.Int32)">
      <summary>
            Sets rule's priority.
            If multiple rules get activated at the same time, rules with higher priority get executed first.
            Priority value can be positive, negative or zero.
            Default priority is zero.
            </summary>
      <param name="priority">Priority value.</param>
    </member>
    <member name="M:NRules.Fluent.Dsl.Rule.When">
      <summary>
            Returns expression builder for rule's left hand side (conditions).
            </summary>
      <returns>Left hand side expression builder.</returns>
    </member>
    <member name="M:NRules.Fluent.Dsl.Rule.Then">
      <summary>
            Returns expression builder for rule's right hand side (actions).
            </summary>
      <returns>Right hand side expression builder.</returns>
    </member>
    <member name="M:NRules.Fluent.Dsl.Rule.Define">
      <summary>
            Method called by the rules engine to define the rule.
            </summary>
    </member>
    <member name="T:NRules.Fluent.IRuleMetadata">
      <summary>
            Metadata associated with a rule defined using internal DSL.
            </summary>
    </member>
    <member name="M:NRules.Fluent.IRuleMetadata.IsTagged(System.String)">
      <summary>
            Tests if the rule is tagged with a given tag.
            </summary>
      <param name="tag">Tag to test.</param>
      <returns>
        <c>true</c> if the rule is tagged, <c>false</c> otherwise.</returns>
    </member>
    <member name="P:NRules.Fluent.IRuleMetadata.RuleType">
      <summary>
            Rule's .NET type.
            </summary>
    </member>
    <member name="P:NRules.Fluent.IRuleMetadata.Name">
      <summary>
            Rule's name.
            </summary>
    </member>
    <member name="P:NRules.Fluent.IRuleMetadata.Description">
      <summary>
            Rule's description.
            </summary>
    </member>
    <member name="P:NRules.Fluent.IRuleMetadata.Tags">
      <summary>
            Tags applied to the rule.
            </summary>
    </member>
    <member name="T:NRules.Fluent.RuleRepository">
      <summary>
            Rules repository based on the rules defined inline using internal DSL.
            Use <see cref="M:NRules.Fluent.RuleRepository.Load(System.Action{NRules.Fluent.IRuleLoadSpec})" /> method to fluently load rules into the repository.
            </summary>
    </member>
    <member name="M:NRules.Fluent.RuleRepository.#ctor">
      <summary>
            Creates an empty rule repository.
            </summary>
    </member>
    <member name="M:NRules.Fluent.RuleRepository.GetRuleSets">
      <summary>
            Retrieves all rule sets contained in the repository.
            </summary>
      <returns>Collection of rule sets.</returns>
    </member>
    <member name="M:NRules.Fluent.RuleRepository.Load(System.Action{NRules.Fluent.IRuleLoadSpec})">
      <summary>
            Loads rules into a rule set using provided loader specification.
            <seealso cref="T:NRules.Fluent.IRuleLoadSpec" /></summary>
      <param name="specAction">Rule loader specification.</param>
    </member>
    <member name="P:NRules.Fluent.RuleRepository.Activator">
      <summary>
            Rules activator that instantiates rules based on a .NET type.
            </summary>
    </member>
    <member name="T:NRules.Fluent.IRuleActivator">
      <summary>
            Rule activator that instantiates rules based on the .NET types.
            Default activator uses .NET reflection activator.
            </summary>
    </member>
    <member name="M:NRules.Fluent.IRuleActivator.Activate(System.Type)">
      <summary>
            Creates an instance of a rule from a .NET type.
            </summary>
      <param name="type">Rule type.</param>
      <returns>Rule instance.</returns>
    </member>
    <member name="T:NRules.Fluent.IRuleLoadSpec">
      <summary>
            Fluent specification to load rule definitions via reflection.
            </summary>
    </member>
    <member name="M:NRules.Fluent.IRuleLoadSpec.From(System.Reflection.Assembly[])">
      <summary>
            Specifies to load all rule definitions from a given collection of assemblies.
            </summary>
      <param name="assemblies">Assemblies to load from.</param>
      <returns>Spec to continue fluent configuration.</returns>
    </member>
    <member name="M:NRules.Fluent.IRuleLoadSpec.From(System.Type[])">
      <summary>
            Specifies to load rule definitions from a given collection of types.
            </summary>
      <param name="types">Types that represent rule definitions.</param>
      <returns>Spec to continue fluent configuration.</returns>
    </member>
    <member name="M:NRules.Fluent.IRuleLoadSpec.Where(System.Func{NRules.Fluent.IRuleMetadata,System.Boolean})">
      <summary>
            Specifies which rules to load by filtering on rule's metadata.
            </summary>
      <param name="filter">Filter condition based on rule's metadata.</param>
      <returns>Spec to continue fluent configuration.</returns>
    </member>
    <member name="M:NRules.Fluent.IRuleLoadSpec.To(System.String)">
      <summary>
            Specifies the name of the rule set where the rules are loaded to.
            If not provided, loads rules into default rule set.
            </summary>
      <param name="ruleSetName">Name of the rule set to load rules to.</param>
      <returns>Spec to continue fluent configuration.</returns>
    </member>
    <member name="T:NRules.RuleModel.RuleElement">
      <summary>
            Base class for rule elements.
            </summary>
    </member>
    <member name="T:NRules.RuleModel.RuleRightElement">
      <summary>
            Base class for rule elements on the right hand side of the rule definition.
            </summary>
    </member>
    <member name="T:NRules.RuleModel.ActionGroupElement">
      <summary>
            Rule element that groups actions that run when the rule fires.
            </summary>
    </member>
    <member name="P:NRules.RuleModel.ActionGroupElement.Actions">
      <summary>
            List of actions the group element contains.
            </summary>
    </member>
    <member name="T:NRules.RuleModel.RuleLeftElement">
      <summary>
            Base class for rule elements on the left hand side of the rule definition.
            </summary>
    </member>
    <member name="T:NRules.RuleModel.PatternSourceElement">
      <summary>
            Rule element that serves as a source to pattern elements.
            </summary>
    </member>
    <member name="P:NRules.RuleModel.PatternSourceElement.ResultType">
      <summary>
            Type of the result that this rule element yields.
            </summary>
    </member>
    <member name="T:NRules.RuleModel.AggregateElement">
      <summary>
            Rule element that creates new facts (aggregates) based on matching facts it receives as input.
            </summary>
    </member>
    <member name="P:NRules.RuleModel.AggregateElement.AggregateType">
      <summary>
            Type of the aggregate. Must implement <c>IAggregate</c> interface.
            </summary>
    </member>
    <member name="P:NRules.RuleModel.AggregateElement.Source">
      <summary>
            Fact source of the aggregate.
            </summary>
    </member>
    <member name="T:NRules.RuleModel.GroupElement">
      <summary>
            Grouping element that logically combines the patterns.
            </summary>
    </member>
    <member name="P:NRules.RuleModel.GroupElement.ChildElements">
      <summary>
            List of child elements in the grouping.
            </summary>
    </member>
    <member name="T:NRules.RuleModel.AndElement">
      <summary>
            Grouping element based on the logical AND condition.
            </summary>
    </member>
    <member name="T:NRules.RuleModel.Builders.RuleElementBuilder">
      <summary>
            Base class for rule element builders.
            </summary>
    </member>
    <member name="P:NRules.RuleModel.Builders.RuleElementBuilder.Declarations">
      <summary>
            Pattern declarations visible by the element being built.
            </summary>
    </member>
    <member name="T:NRules.RuleModel.Builders.ActionGroupBuilder">
      <summary>
            Builder to compose a group of rule actions.
            </summary>
    </member>
    <member name="M:NRules.RuleModel.Builders.ActionGroupBuilder.Action(System.Linq.Expressions.LambdaExpression)">
      <summary>
            Adds a rule action to the group.
            </summary>
      <param name="expression">Rule action expression.</param>
    </member>
    <member name="T:NRules.RuleModel.Builders.AggregateBuilder">
      <summary>
            Builder to compose an aggregate element.
            </summary>
    </member>
    <member name="M:NRules.RuleModel.Builders.AggregateBuilder.AggregateType(System.Type)">
      <summary>
            Sets aggregate type.
            </summary>
      <param name="aggregateType">
      </param>
    </member>
    <member name="M:NRules.RuleModel.Builders.AggregateBuilder.CollectionOf(System.Type)">
      <summary>
            Sets aggregate type to the collection aggregate.
            </summary>
      <param name="elementType">Type of element to aggregate.</param>
    </member>
    <member name="M:NRules.RuleModel.Builders.AggregateBuilder.SourcePattern(System.Type)">
      <summary>
            Creates a pattern builder that builds the source of the aggregate.
            </summary>
      <param name="type">Type of the element the pattern matches.</param>
      <returns>Pattern builder.</returns>
    </member>
    <member name="T:NRules.RuleModel.Builders.GroupType">
      <summary>
            Type of group element.
            </summary>
    </member>
    <member name="F:NRules.RuleModel.Builders.GroupType.And">
      <summary>
            Logical AND.
            </summary>
    </member>
    <member name="F:NRules.RuleModel.Builders.GroupType.Or">
      <summary>
            Logical OR.
            </summary>
    </member>
    <member name="F:NRules.RuleModel.Builders.GroupType.Not">
      <summary>
            Logical NOT.
            </summary>
    </member>
    <member name="F:NRules.RuleModel.Builders.GroupType.Exists">
      <summary>
            Existential quantifier.
            </summary>
    </member>
    <member name="T:NRules.RuleModel.Builders.GroupBuilder">
      <summary>
            Builder to compose a group element.
            </summary>
    </member>
    <member name="M:NRules.RuleModel.Builders.GroupBuilder.Pattern(System.Type,System.String)">
      <summary>
            Creates a pattern builder that builds a pattern as part of the current group.
            </summary>
      <param name="type">Pattern type.</param>
      <param name="name">Pattern name (optional).</param>
      <returns>Pattern builder.</returns>
    </member>
    <member name="M:NRules.RuleModel.Builders.GroupBuilder.Group(NRules.RuleModel.Builders.GroupType)">
      <summary>
            Creates a group builder that builds a group as a part of the current group.
            </summary>
      <param name="groupType">Group type.</param>
      <returns>Group builder.</returns>
    </member>
    <member name="T:NRules.RuleModel.Builders.PatternBuilder">
      <summary>
            Builder to compose a rule pattern.
            </summary>
    </member>
    <member name="M:NRules.RuleModel.Builders.PatternBuilder.Condition(System.Linq.Expressions.LambdaExpression)">
      <summary>
            Adds a condition expression to the pattern.
            </summary>
      <param name="expression">Condition expression.</param>
    </member>
    <member name="M:NRules.RuleModel.Builders.PatternBuilder.SourceAggregate">
      <summary>
            Creates an aggregate builder that builds the source of the pattern.
            </summary>
      <returns>Aggregate builder.</returns>
    </member>
    <member name="P:NRules.RuleModel.Builders.PatternBuilder.Declaration">
      <summary>
            Pattern declaration.
            </summary>
    </member>
    <member name="T:NRules.RuleModel.Builders.RuleBuilder">
      <summary>
            Builder to compose a rule definition.
            Contains methods to specify rule's metadata, as well as create child builders for rule's left-hand side and right-hand side.
            Creates <see cref="T:NRules.RuleModel.IRuleDefinition" />.
            </summary>
      <threadsafety instance="false" />
    </member>
    <member name="M:NRules.RuleModel.Builders.RuleBuilder.#ctor">
      <summary>
            Constructs an empty rule builder.
            </summary>
    </member>
    <member name="M:NRules.RuleModel.Builders.RuleBuilder.Name(System.String)">
      <summary>
            Sets rule's name.
            </summary>
      <param name="name">Rule name value.</param>
    </member>
    <member name="M:NRules.RuleModel.Builders.RuleBuilder.Description(System.String)">
      <summary>
            Sets rule's description.
            </summary>
      <param name="description">Rule description value.</param>
    </member>
    <member name="M:NRules.RuleModel.Builders.RuleBuilder.Tags(System.Collections.Generic.IEnumerable{System.String})">
      <summary>
            Sets rule's tags.
            </summary>
      <param name="tags">Rule tag values.</param>
    </member>
    <member name="M:NRules.RuleModel.Builders.RuleBuilder.Priority(System.Int32)">
      <summary>
            Sets rule's priority.
            </summary>
      <param name="priority">Rule priority value.</param>
    </member>
    <member name="M:NRules.RuleModel.Builders.RuleBuilder.LeftHandSide">
      <summary>
            Retrieves left hand side builder (conditions).
            </summary>
      <returns>Left hand side builder.</returns>
    </member>
    <member name="M:NRules.RuleModel.Builders.RuleBuilder.RightHandSide">
      <summary>
            Retrieves right hand side builder (actions).
            </summary>
      <returns>Right hand side builder.</returns>
    </member>
    <member name="M:NRules.RuleModel.Builders.RuleBuilder.Build">
      <summary>
            Creates rule definition using current state of the builder.
            </summary>
      <returns>Rule definition.</returns>
    </member>
    <member name="T:NRules.RuleModel.IAggregate">
      <summary>
            Base interface for aggregate types.
            </summary>
    </member>
    <member name="M:NRules.RuleModel.IAggregate.Add(System.Object)">
      <summary>
            Add is called by the rules engine when a new fact enters corresponding aggregation node.
            </summary>
      <param name="fact">New fact to add to the aggregate.</param>
      <returns>Result of the aggregation, based on the added fact.</returns>
    </member>
    <member name="M:NRules.RuleModel.IAggregate.Modify(System.Object)">
      <summary>
            Modify is called by the rules engine when an existing fact is updated in the corresponding aggregation node.
            </summary>
      <param name="fact">Existing fact to update in the aggregate.</param>
      <returns>Result of the aggregation, based on the modified fact.</returns>
    </member>
    <member name="M:NRules.RuleModel.IAggregate.Remove(System.Object)">
      <summary>
            Remove is called by the rules engine when an existing fact is removed from the corresponding aggregation node.
            </summary>
      <param name="fact">Existing fact to remove from the aggregate.</param>
      <returns>Result of the aggregation, based on the removed fact.</returns>
    </member>
    <member name="P:NRules.RuleModel.IAggregate.Result">
      <summary>
            Result of the aggregation.
            </summary>
    </member>
    <member name="T:NRules.RuleModel.CollectionAggregate`1">
      <summary>
            Aggregate that folds matching facts into a collection.
            </summary>
      <typeparam name="T">Type of facts to collect.</typeparam>
    </member>
    <member name="T:NRules.RuleModel.ExistsElement">
      <summary>
            Grouping element based on the existential quantifier.
            </summary>
    </member>
    <member name="T:NRules.RuleModel.IContext">
      <summary>
            Rules engine execution context.
            Can be used by rules to interact with the rules engine, i.e. insert, update, retract facts.
            </summary>
    </member>
    <member name="M:NRules.RuleModel.IContext.Halt">
      <summary>
            Halts rules execution. The engine continues execution of the current rule and exists the execution cycle.
            </summary>
    </member>
    <member name="M:NRules.RuleModel.IContext.Insert(System.Object)">
      <summary>
            Inserts a new fact into the rules engine's memory.
            </summary>
      <param name="fact">New fact to insert.</param>
    </member>
    <member name="M:NRules.RuleModel.IContext.Update(System.Object)">
      <summary>
            Updates existing fact in the rules engine's memory.
            </summary>
      <param name="fact">Existing fact to update.</param>
    </member>
    <member name="M:NRules.RuleModel.IContext.Update``1(``0,System.Action{``0})">
      <summary>
            Updates existing fact in the rules engine's memory.
            First the update action is applied to the fact, then the fact is updated in the engine's memory.
            </summary>
      <param name="fact">Existing fact to update.</param>
      <param name="updateAction">Action to apply to the fact.</param>
    </member>
    <member name="M:NRules.RuleModel.IContext.Retract(System.Object)">
      <summary>
            Removes existing fact from the rules engine's memory.
            </summary>
      <param name="fact">Existing fact to remove.</param>
    </member>
    <member name="T:NRules.RuleModel.IRuleRepository">
      <summary>
            In-memory database of production rules arranged into rule sets.
            <seealso cref="T:NRules.RuleModel.IRuleSet" /></summary>
    </member>
    <member name="M:NRules.RuleModel.IRuleRepository.GetRuleSets">
      <summary>
            Retrieves all rule sets contained in the repository.
            </summary>
      <returns>Collection of rule sets.</returns>
    </member>
    <member name="T:NRules.RuleModel.IRuleSet">
      <summary>
            Represents a set of rules.
            </summary>
    </member>
    <member name="M:NRules.RuleModel.IRuleSet.Add(System.Collections.Generic.IEnumerable{NRules.RuleModel.IRuleDefinition})">
      <summary>
            Adds rules to the ruleset.
            </summary>
      <param name="ruleDefinitions">Rule definitions to add.</param>
    </member>
    <member name="P:NRules.RuleModel.IRuleSet.Name">
      <summary>
            Rule set name.
            </summary>
    </member>
    <member name="P:NRules.RuleModel.IRuleSet.Rules">
      <summary>
            Rules in the ruleset.
            </summary>
    </member>
    <member name="T:NRules.RuleModel.RuleSet">
      <summary>
            Default implementation of a rule set.
            </summary>
    </member>
    <member name="T:NRules.RuleModel.NotElement">
      <summary>
            Grouping element based on the logical NOT condition.
            </summary>
    </member>
    <member name="T:NRules.RuleModel.OrElement">
      <summary>
            Grouping element based on the logical OR condition.
            </summary>
    </member>
    <member name="T:NRules.RuleModel.IRuleDefinition">
      <summary>
            Production rule definition in the canonical rule model.
            </summary>
    </member>
    <member name="P:NRules.RuleModel.IRuleDefinition.Name">
      <summary>
            Rule name.
            </summary>
    </member>
    <member name="P:NRules.RuleModel.IRuleDefinition.Priority">
      <summary>
            Rule priority.
            </summary>
    </member>
    <member name="P:NRules.RuleModel.IRuleDefinition.Description">
      <summary>
            Rule description.
            </summary>
    </member>
    <member name="P:NRules.RuleModel.IRuleDefinition.Tags">
      <summary>
            Tags applied to the rule.
            </summary>
    </member>
    <member name="P:NRules.RuleModel.IRuleDefinition.LeftHandSide">
      <summary>
            Rule left hand side (conditions).
            </summary>
    </member>
    <member name="P:NRules.RuleModel.IRuleDefinition.RightHandSide">
      <summary>
            Rule right hand side (actions).
            </summary>
    </member>
    <member name="T:NRules.RuleModel.ConditionElement">
      <summary>
            Pattern condition element.
            </summary>
    </member>
    <member name="P:NRules.RuleModel.ConditionElement.Expression">
      <summary>
            Expression that represents a boolean condition.
            </summary>
    </member>
    <member name="P:NRules.RuleModel.ConditionElement.Declarations">
      <summary>
            List of declarations the condition expression references.
            </summary>
    </member>
    <member name="T:NRules.RuleModel.RuleElementVisitor`1">
      <summary>
            Visitor to traverse rule definition (or its part).
            </summary>
      <typeparam name="TContext">Traversal context.</typeparam>
    </member>
    <member name="M:NRules.RuleModel.RuleElementExtensions.Match(NRules.RuleModel.RuleElement,System.Action{NRules.RuleModel.PatternElement},System.Action{NRules.RuleModel.AggregateElement},System.Action{NRules.RuleModel.GroupElement})">
      <summary>
            Matches a rule element to an appropriate action based on the concrete type of the rule element.
            Type-safe implementation of discriminated union for rule elements.
            </summary>
      <param name="element">Rule element to match.</param>
      <param name="pattern">Action to invoke on the element if the element is a <see cref="T:NRules.RuleModel.PatternElement" />.</param>
      <param name="aggregate">Action to invoke on the element if the element is an <see cref="T:NRules.RuleModel.AggregateElement" />.</param>
      <param name="group">Action to invoke on the element if the element is a <see cref="T:NRules.RuleModel.GroupElement" />.</param>
    </member>
    <member name="M:NRules.RuleModel.RuleElementExtensions.Match(NRules.RuleModel.GroupElement,System.Action{NRules.RuleModel.AndElement},System.Action{NRules.RuleModel.OrElement},System.Action{NRules.RuleModel.NotElement},System.Action{NRules.RuleModel.ExistsElement})">
      <summary>
            Matches a group element to an appropriate action based on the concrete type of the group element.
            Type-safe implementation of discriminated union for group elements.
            </summary>
      <param name="element">Group element to match.</param>
      <param name="and">Action to invoke on the element if the element is a <see cref="T:NRules.RuleModel.AndElement" />.</param>
      <param name="or">Action to invoke on the element if the element is a <see cref="T:NRules.RuleModel.OrElement" />.</param>
      <param name="not">Action to invoke on the element if the element is a <see cref="T:NRules.RuleModel.NotElement" />.</param>
      <param name="exists">Action to invoke on the element if the element is a <see cref="T:NRules.RuleModel.ExistsElement" />.</param>
    </member>
    <member name="T:NRules.RuleModel.PatternElement">
      <summary>
            Rule element that represents a pattern that matches facts.
            </summary>
    </member>
    <member name="P:NRules.RuleModel.PatternElement.Declaration">
      <summary>
            Declaration that references the pattern.
            </summary>
    </member>
    <member name="P:NRules.RuleModel.PatternElement.Source">
      <summary>
            Optional pattern source element.
            </summary>
    </member>
    <member name="P:NRules.RuleModel.PatternElement.ValueType">
      <summary>
            Type of the values that the pattern matches.
            </summary>
    </member>
    <member name="P:NRules.RuleModel.PatternElement.Conditions">
      <summary>
            List of conditions the pattern checks.
            </summary>
    </member>
    <member name="T:NRules.RuleModel.Declaration">
      <summary>
            Pattern declaration.
            </summary>
    </member>
    <member name="P:NRules.RuleModel.Declaration.Name">
      <summary>
            Symbol name.
            </summary>
    </member>
    <member name="P:NRules.RuleModel.Declaration.Type">
      <summary>
            Symbol type.
            </summary>
    </member>
    <member name="P:NRules.RuleModel.Declaration.IsLocal">
      <summary>
            Indicates whether the symbol is local or exposed in an outer scope.
            </summary>
    </member>
    <member name="P:NRules.RuleModel.Declaration.Target">
      <summary>
            Rule element that this declaration is referencing.
            </summary>
    </member>
    <member name="T:NRules.RuleModel.AggregationResults">
      <summary>
            Result of an aggregation, based on added/modified/removed facts.
            </summary>
    </member>
    <member name="F:NRules.RuleModel.AggregationResults.None">
      <summary>
            No changes at the aggregate level.
            </summary>
    </member>
    <member name="F:NRules.RuleModel.AggregationResults.Added">
      <summary>
            New aggregate created.
            </summary>
    </member>
    <member name="F:NRules.RuleModel.AggregationResults.Modified">
      <summary>
            Existing aggregate modified.
            </summary>
    </member>
    <member name="F:NRules.RuleModel.AggregationResults.Removed">
      <summary>
            Existing aggregate removed.
            </summary>
    </member>
    <member name="T:NRules.RuleModel.ActionElement">
      <summary>
            Action executed by the engine when the rule fires.
            </summary>
    </member>
    <member name="P:NRules.RuleModel.ActionElement.Expression">
      <summary>
            Expression that represents the rule action.
            </summary>
    </member>
    <member name="P:NRules.RuleModel.ActionElement.Declarations">
      <summary>
            List of declarations referenced by the action expression.
            </summary>
    </member>
  </members>
</doc>